name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: andriifedotov/rickmorty-api
  HELM_CHART_PATH: helm/rickmorty-api-chart

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install flake8

      - name: Lint code
        run: flake8 . --exit-zero

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: fs
          severity: CRITICAL,HIGH

  build-test:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: app
        run: |
          pip install -r requirements.txt
          pip install pytest requests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t ${{ env.DOCKER_IMAGE }}:ci-${{ github.sha }} ./app

      - name: Run unit tests inside container
        working-directory: app
        run: docker run --rm $DOCKER_IMAGE:ci-${{ github.sha }} pytest tests/unit

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add Docker build step here
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for deployment
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t ${{ env.DOCKER_IMAGE }}:ci-${{ github.sha }} ./app

      - name: Set up kind
        uses: engineerd/setup-kind@v0.6.2
        with:
          version: v0.24.0
          name: kind

      - name: Create kind cluster
        run: kind create cluster --name rickmorty-ci

      - name: Load Docker image into kind
        run: kind load docker-image $DOCKER_IMAGE:ci-${{ github.sha }} --name rickmorty-ci 

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm install nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace

          # Wait for the controller pod
          kubectl wait --namespace ingress-nginx \
            --for=condition=available deployment/nginx-ingress-nginx-controller \
            --timeout=120s

          # Wait for the admission webhook service endpoint
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            -l app.kubernetes.io/component=admission-webhook \
            --timeout=120s


      - name: Deploy app via Helm
        run: |
          helm upgrade --install rickmorty $HELM_CHART_PATH \
            --set image.tag=ci-${{ github.sha }} \
            --wait

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/rickmorty --timeout=120s

      - name: Port-forward Ingress for integration tests
        run: |
          kubectl port-forward --namespace ingress-nginx svc/ingress-nginx-controller 8080:80 &
          sleep 5

      - name: Run integration tests against API
        working-directory: app
        run: |
          export API_URL="http://localhost:8080/api/characters/"
          python - <<EOF
          import requests
          r = requests.get("${API_URL}")
          assert r.status_code == 200, f"Expected 200 but got {r.status_code}"
          data = r.json()
          assert "results" in data, "No results key in API response"
          print("Integration test passed!")
          EOF

  push-image:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build image again for pushing
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for push
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t ${{ env.DOCKER_IMAGE }}:ci-${{ github.sha }} ./app

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push image
        run: |
          docker tag $DOCKER_IMAGE:ci-${{ github.sha }} $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:latest